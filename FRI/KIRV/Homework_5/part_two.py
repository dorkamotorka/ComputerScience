#!/usr/bin/env python
import gmpy2
import random
import math

# Algorithm - given e,d,n - calculate p,q
def factorize1(n, e, d):
    restep = False
    # [Initialize] Set k ← de−1.
    k = d*e - 1
    while True:
        if not restep:
            # [Try a random g] Choose g at random from {2,…,N−1} and set t ← k.
            g = random.randint(2, n-1)
            t = k
        restep = False
        # [Next t] If t is divisible by 2, set t← t/2 and x ← g^t (modN). Otherwise go to step 2.
        if (t % 2 == 0):
            t = gmpy2.div(t, 2)
            x = pow(g,int(t)) % n
        else:
            continue
        #[Finished?] If x>1 and y=gcd(x−1,N)>1 then set p ← y and q ← N/y, output (p,q) and terminate the algorithm. Otherwise go to step 3.
        y = math.gcd(x-1, n)
        if (x > 1 and y > 1):
            p = y
            q = n/y
            return p, q
        else: 
            restep = True

def factorize2(d, e, n):
    k = gmpy2.sub(gmpy2.mul(d, e), 1)

    rs = gmpy2.random_state(hash(gmpy2.random_state()))
    while True:
        g = gmpy2.add(gmpy2.mpz(2), gmpy2.mpz_random(rs, n-2))
        t = k
        while gmpy2.f_mod(t,2)==0: 
            t = gmpy2.div(t, 2)
            x = gmpy2.powmod(g, t, n)
            y = gmpy2.gcd(gmpy2.sub(x, 1), n)
            if (x > 1) and (y > 1):
                p = y
                q = gmpy2.div(n, y)
                return p, q
            else:
                t = gmpy2.div(t, 2)

if __name__ == '__main__':

    ''' 
    Eve has:
        - ct
        - dB (old decryption exponent)
        - eB, nB

    She needs dB_
    '''
    # Factorize nB -> you get (pB, qB) and (pB', qB')


    # Input: N, e, d.
    # Output: p and q where pq=N.
    n = '780599032234975811341337402481579339244977106697680155571408017289870397205474776594988173210469010471827203018207637265087668980028487213856285651896772514731620740107589603250018809532353908373872228771684107393408147099970033612639652934093290907032137862997409242695063173841099249214963729400228614747992865961146305013317935155315445227982083961476155839486413393102590554948392790512152545354984257303165185669326483612073132709888662498694628541864867772741811208466574056212763450133080290973747413164823944228518615519941589766063081422312226857098722756760798744759058791598893374251700451609573179019029082894344279524586752645011966074177024535274526614379267379433782524169494125317219632631637188905368328335031243387312503457725322953887025464075430657951920747630820986382480473583165619039074222435987761159127086311386057454058779600071246400893931512876334384899593033965168431831238196085471849502811342141737895537321966546315440976695029427146448566122312540287339779585972909472892538360714867460843638162522290036020862914693463850334348851012645012730899991913026747261003205222640201129363570608744229268411219742543719124560460047131199019293090540559264494563002679383036489321446344179990875967457743091'
    e = '65537'
    d = '105029559885988322694171433161154258105531350639488283135155345781193480973463487495836027150615922827419202530090711283756398142513255111643571217456181089077977809272147414765074169743141992523930074817411698109389704153799163165788126700533052157074772901962420536522652350076000017998650383231628178354941500099873172675090979938043724858024413939794264952509135195391590147756762250739828816469173919784233495692999693798789399640444302087576319246870689900667367917912907976069764378950417352118749785453826350614264875591724444795415479072614694240290164903323568721962942771630056941485748425809744362613329843590754878274346640926125748471967120198347754904047092684375956652112108437817881436792850772795830895129567108953623775791745878724092979572133501662892227234057540580549783103153889321807190173711919876390361792092555787148232748935548415422123618737666119962003222163352512915445591267089355941908223428896479285162406179958522030280356601418321078839478431203797712265576062042883474641311527804677143666266815006412917352601027541224578151267344432181185670578617102293510749691968507289637411166513708605158482212932799716245456753989634922099224651355964561044476620515960197314571001093213218399806150727473' 
    e2 = '170141183460469231731687303715884105727' 
    ee2 = gmpy2.mpz(int(e2))
    Em = gmpy2.mpz
    nn = gmpy2.mpz(int(n))
    ee = gmpy2.mpz(int(e))
    dd = gmpy2.mpz(int(d))

    p, q = factorize2(dd, ee, nn)
    phi = gmpy2.mul(gmpy2.sub(p, 1),gmpy2.sub(q, 1))
    d2 = gmpy2.powmod(e2, -1, phi)
    x = gmpy2.powmod(Em, d2, n)
    m = int.from_bytes(gmpy2.to_binary(x)[::-1], byteorder='big').to_bytes(512, byteorder='big').decode("utf-8")
    print("Decrypted message: ", m)
