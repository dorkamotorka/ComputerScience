#!/usr/bin/env python
import gmpy2

def egcd(a, b):
    x,y,u,v = 0,1,1,0
    while a != 0:
        q,r = b//a,b%a
        m,n = x-u*q, y-v*q
        b,a,x,y,u,v = a,r,u,v,m,n
        gcd = b

    return x

if __name__ == '__main__':

    n = "1869578692404843692322851853790504675785490458941418816789937357228584999694229481781082576516004784967793396134042249283731541326522693989189672781989605367915467207173921917764601173241003275079144891798109323179882563958434067801607159395991293988128979523500485675739199386415393849926760028894957048405194696264543096632626266113459760373772648042130342168769029700837387351405620281318401168210834520710877989913969345751805302638927721067161987258238119709324242788800684044845924947196434207131958051848544612331436580528999574831395608419325858276755014492392928240007721159544167457326123991416480753423984310450347787167210183775589168689021239431549646289225543921262925762854468723108863565081485561010957193372906716767453636146225697688527085520729322590370367846553675015245648558243086523704781262012616424483189936559549788076211532572418932359209054902532723352725511759965792485553995457211293158370352311"

    nn = gmpy2.mpz(int(n))
    gmpy2.get_context().precision=925

    # Assume k is small such that k^2 ~ n (= p*q)
    k = gmpy2.add(gmpy2.isqrt(nn), 1)

    h = gmpy2.sub(gmpy2.mul(k, k), nn)
    sh = gmpy2.isqrt(h)

    p = gmpy2.add(k, sh) # p = k + sh
    q = gmpy2.sub(k, sh) # p = k - sh

    assert nn == gmpy2.mul(p, q)

    print("p = ", p)
    print("q = ", q)
    print("difference =", p - q)

    # c = m^e mod n
    ct = 573256635999432829534111767787606726920015881822705682854772997013016018550348445438577494886991887924445642526969996711261212252623395996849411908052814815300369099016335577475621772121439219519936882367958195752345289184355978250768810225913044776152660015345506880948034775410406880255824696522724593123069800372040958603443909874300325042975562536247231784556303749034739459371953286576230953353488252626697421563576307986976904778544087300090557094203204214718781704198778076757624273410630218770228694776965608326700246677477443108683578524190717830814601948297008202853563977842409909023771577825773256513437271035474705285420915255439169706383775886106307200607630073448902808142803254757759974342996672000749920462973505249898850941070843559266264297882666503549349135549583204269040628470247815066953770676158517215889006175528203645217775080795057961639783677482580753503078199490697308594767235780716748270076726

    fi = gmpy2.add(gmpy2.sub(gmpy2.sub(nn, p), q), 1) # n - p - q + 1

    e = 65537
    # e * d = 1 (mod fi) 
    d = egcd(e, fi)

    # Decrypt ciphertext
    pt = pow(ct, d, nn)
    print( "pt: " + int(pt).to_bytes(384, byteorder='big').decode("utf-8")) 

